version: '3.8'

services:
  # API Gateway with enterprise security
  api-gateway:
    build: 
      context: .
      dockerfile: ./api-gateway/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - JWT_SECRET=production-jwt-secret-change-this
      - API_KEY=production-api-key-change-this
      - REDIS_URL=redis://redis:6379
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=campfire_ads
      - DB_USER=campfire_user
      - DB_PASSWORD=campfire_password
      - DB_SSL=false
      - INVENTORY_SERVICE_URL=http://inventory-service:3004
      - TRACKING_SERVICE_URL=http://tracking-service:3006
      - ANALYTICS_SERVICE_URL=http://mock-services:3002
      - AUDIO_SERVICE_URL=http://mock-services:8081
      - RSS_SERVICE_URL=http://mock-services:3003
      - RTB_ENGINE_URL=http://mock-services:8080
    depends_on:
      - redis
      - inventory-service
      - tracking-service
      - mock-services
    networks:
      - campfire-network
    restart: unless-stopped

  # Dashboard (React frontend)
  dashboard:
    build: 
      context: ./dashboard
      dockerfile: Dockerfile
    ports:
      - "3001:80"
    depends_on:
      - api-gateway
    networks:
      - campfire-network
    restart: unless-stopped

  # Redis for rate limiting and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - campfire-network
    restart: unless-stopped

  # PostgreSQL database for inventory service
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=campfire_ads
      - POSTGRES_USER=campfire_user
      - POSTGRES_PASSWORD=campfire_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./services/inventory-service/migrations:/docker-entrypoint-initdb.d
    networks:
      - campfire-network
    restart: unless-stopped

  # Inventory Service (Node.js + PostgreSQL)
  inventory-service:
    build:
      context: .
      dockerfile: ./services/inventory-service/Dockerfile
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - PORT=3004
      - DATABASE_URL=postgresql://campfire_user:campfire_password@postgres:5432/campfire_ads
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=campfire_ads
      - DB_USER=campfire_user
      - DB_PASSWORD=campfire_password
      - DB_SSL=false
      - JWT_SECRET=production-jwt-secret-change-this
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - campfire-network
    restart: unless-stopped

  # Tracking Service (Node.js + PostgreSQL)
  tracking-service:
    build:
      context: .
      dockerfile: ./services/tracking-service/Dockerfile
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=production
      - PORT=3006
      - DATABASE_URL=postgresql://campfire_user:campfire_password@postgres:5432/campfire_ads
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=campfire_ads
      - DB_USER=campfire_user
      - DB_PASSWORD=campfire_password
      - DB_SSL=false
      - JWT_SECRET=production-jwt-secret-change-this
      - REDIS_URL=redis://redis:6379
      - TRACKING_BASE_URL=http://localhost:3006
    depends_on:
      - postgres
      - redis
    networks:
      - campfire-network
    restart: unless-stopped

  # Mock services for testing API Gateway routing
  mock-services:
    image: node:18-alpine
    command: |
      sh -c "
        npm install -g json-server &&
        echo '{
          \"podcasters\": [
            {\"id\": \"1\", \"name\": \"Tech Talk Daily\", \"email\": \"host@techtalking.com\", \"episodes\": 145, \"revenue\": 1234},
            {\"id\": \"2\", \"name\": \"Morning Coffee Chat\", \"email\": \"morning@coffee.com\", \"episodes\": 89, \"revenue\": 987}
          ],
          \"advertisers\": [
            {\"id\": \"1\", \"name\": \"TechCorp\", \"company_name\": \"Tech Corporation\", \"budget\": 50000},
            {\"id\": \"2\", \"name\": \"StartupAds\", \"company_name\": \"Startup Advertising Inc\", \"budget\": 25000}
          ],
          \"campaigns\": [
            {\"id\": \"1\", \"name\": \"Q4 Tech Product Launch\", \"status\": \"active\", \"budget\": 15000, \"spent\": 3200},
            {\"id\": \"2\", \"name\": \"Holiday Sale Campaign\", \"status\": \"paused\", \"budget\": 8000, \"spent\": 1500}
          ],
          \"inventory\": [
            {\"id\": \"1\", \"episode_id\": \"ep_001\", \"podcast_id\": \"1\", \"status\": \"available\", \"price_cpm\": 250},
            {\"id\": \"2\", \"episode_id\": \"ep_002\", \"podcast_id\": \"2\", \"status\": \"booked\", \"price_cpm\": 300}
          ],
          \"analytics\": [
            {\"id\": \"1\", \"event_type\": \"impression\", \"campaign_id\": \"1\", \"timestamp\": \"2024-01-01T10:00:00Z\"},
            {\"id\": \"2\", \"event_type\": \"click\", \"campaign_id\": \"1\", \"timestamp\": \"2024-01-01T10:05:00Z\"}
          ]
        }' > db.json &&
        echo 'Mock services starting...' &&
        json-server --host 0.0.0.0 --port 3001 --routes routes.json db.json &
        json-server --host 0.0.0.0 --port 3002 --routes routes.json db.json &
        json-server --host 0.0.0.0 --port 3003 --routes routes.json db.json &
        json-server --host 0.0.0.0 --port 8080 --routes routes.json db.json &
        json-server --host 0.0.0.0 --port 8081 --routes routes.json db.json &
        echo 'All mock services started' &&
        tail -f /dev/null
      "
    networks:
      - campfire-network
    restart: unless-stopped

volumes:
  redis-data:
  postgres-data:

networks:
  campfire-network:
    driver: bridge